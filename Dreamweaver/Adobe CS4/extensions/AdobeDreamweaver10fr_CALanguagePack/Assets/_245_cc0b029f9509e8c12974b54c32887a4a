<html>
<head>
<title>ASP.NET lookup module</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<script src="../lookupMod.js"></script>
<script language="JavaScript">
var BOOK_NAME = "O'REILLY - Référence ASP.NET";

var KEYWORDS_CONFIG = new Array(
        "ALLOW" , "Référentiel web.config" , "<allow>" ,
		"APPSETTINGS" , "Référentiel web.config" , "<appsettings>" ,
		"ASSEMBLIES" , "Référentiel web.config" , "<assemblies>" ,
		"AUTHENTICATION" , "Référentiel web.config" , "<authentication>" ,
		"AUTHORIZATION" , "Référentiel web.config" , "<authorization>" ,
		"BROWSERCAPS" , "Référentiel web.config" , "<browserCaps>" ,
		"CASE" , "Référentiel web.config" , "<case>" ,
		"CLIENTTARGET" , "Référentiel web.config" , "<clientTarget>" ,
		"COMPILATION" , "Référentiel web.config" , "<compilation>" ,
		"COMPILER" , "Référentiel web.config" , "<compiler>" ,
		"COMPILERS" , "Référentiel web.config" , "<compilers>" ,
		"CONFIGURATION" , "Référentiel web.config" , "<configuration>" ,
		"CREDENTIALS" , "Référentiel web.config" , "<credentials>" ,
		"CUSTOMERRORS" , "Référentiel web.config" , "<customerrors>" ,
		"DENY" , "Référentiel web.config" , "<deny>" ,
		"ERROR" , "Référentiel web.config" , "<error>" ,
		"FILTER" , "Référentiel web.config" , "<filter>" ,
		"FORMS" , "Référentiel web.config" , "<forms>" ,
		"GLOBALIZATION" , "Référentiel web.config" , "<globalization>" ,
		"HTTPHANDLERS" , "Référentiel web.config" , "<httpHandlers>" ,
		"HTTPMODULES" , "Référentiel web.config" , "<httpModules>" ,
		"HTTPRUNTIME" , "Référentiel web.config" , "<httpRuntime>" ,
		"IDENTITY" , "Référentiel web.config" , "<identity>" ,
		"LOCATION" , "Référentiel web.config" , "<location>" ,
		"MACHINEKEY" , "Référentiel web.config" , "<machineKey>" ,
		"PAGES" , "Référentiel web.config" , "<pages>" ,
		"PASSPORT" , "Référentiel web.config" , "<passport>" ,
		"PROCESSMODEL" , "Référentiel web.config" , "<processModel>" ,
		"RESULT" , "Référentiel web.config" , "<result>" ,
		"SECURITYPOLICY" , "Référentiel web.config" , "<securityPolicy>" ,
		"SESSIONSTATE" , "Référentiel web.config" , "<sessionState>" ,
		"SYSTEM.WEB" , "Référentiel web.config" , "<system.web>" ,
		"TRACE" , "Référentiel web.config" , "<trace>" ,
		"TRUST" , "Référentiel web.config" , "<trust>" ,
		"USE" , "Référentiel web.config" , "<use>" ,
		"USER" , "Référentiel web.config" , "<user>" );

var KEYWORDS_ASPNET = new Array(
		"ACCEPTTYPES" , "La classe HttpRequest" , "AcceptTypes" ,
		"ADD" , "La classe HttpApplicationState" , "ADD" ,
		"ADDCACHEITEMDEPENDENCIES" , "La classe HttpResponse" , "AddCacheItemDependencies" ,
		"ADDCACHEITEMDEPENDENCY" , "La classe HttpResponse" , "AddCacheItemDependency" ,
		"ADDFILEDEPENDENCIES" , "La classe HttpResponse" , "AddFileDependencies" ,
		"ADDFILEDEPENDENCY" , "La classe HttpResponse" , "AddFileDependency" ,
		"ADDHEADER" , "La classe HttpResponse" , "AddHeader" ,
		"ALLKEYS" , "La classe HttpApplicationState" , "AllKeys" ,
		"APPENDHEADER" , "La classe HttpResponse" , "AppendHeader" ,
		"APPENDTOLOG" , "La classe HttpResponse" , "AppendToLog" ,
		"APPLICATION" , "La classe Page" , "APPLICATION" ,
		"APPLICATIONPATH" , "La classe HttpRequest" , "ApplicationPath" ,
		"APPLYAPPPATHMODIFIER" , "La classe HttpResponse" , "ApplyAppPathModifier" ,
		"BINARYREAD" , "La classe HttpRequest" , "BinaryRead" ,
		"BINARYWRITE" , "La classe HttpResponse" , "BinaryWrite" ,
		"BROWSER" , "La classe HttpRequest" , "Browser" ,
		"BUFFER" , "La classe HttpResponse" , "Buffer" ,
		"BUFFEROUTPUT" , "La classe HttpResponse" , "BufferOutput" ,
		"RESPONSE.CACHE" , "La classe HttpResponse" , "Cache" ,
		"PAGE.CACHE" , "La classe Page" , "Cache" ,
		"CACHECONTROL" , "La classe HttpResponse" , "CacheControl" ,
		"CHARSET" , "La classe HttpResponse" , "Charset" ,
		"APPLICATION.CLEAR" , "La classe HttpApplicationState" , "Clear" ,
		"RESPONSE.CLEAR" , "La classe HttpResponse" , "Clear" ,
		"CLEARCONTENT" , "La classe HttpResponse" , "ClearContent" ,
		"CLEARHEADERS" , "La classe HttpResponse" , "ClearHeaders" ,
		"CLIENTCERTIFICATE" , "La classe HttpRequest" , "ClientCertificate" ,
		"CLIENTTARGET" , "La classe Page" , "ClientTarget" ,
		"CLOSE" , "La classe HttpResponse" , "Close" ,
		"RESPONSE.CONTENTENCODING" , "La classe HttpResponse" , "ContentEncoding" ,
		"REQUEST.CONTENTENCODING" , "La classe HttpRequest" , "ContentEncoding" ,
		"CONTENTLENGTH" , "La classe HttpRequest" , "ContentLength" ,
		"CONTENTS" , "La classe HttpApplicationState" , "Contents" ,
		"RESPONSE.CONTENTTYPE" , "La classe HttpResponse" , "ContentType" ,
		"REQUEST.CONTENTTYPE" , "La classe HttpRequest" , "ContentType" ,
		"CONTEXT" , "La classe Page" , "Context" ,
		"CONTROLS" , "La classe Page" , "Controls" ,
		"RESPONSE.COOKIES" , "La classe HttpResponse" , "Cookies" ,
		"REQUEST.COOKIES" , "La classe HttpRequest" , "Cookies" ,
		"COUNT" , "La classe HttpApplicationState" , "Count" ,
		"DATABIND" , "La classe Page" , "DataBind" ,
		"ENABLEVIEWSTATE" , "La classe Page" , "EnableViewState" ,
		"RESPONSE.END" , "La classe HttpResponse" , "End" ,
		"APPLICATION.END" , "La classe HttpApplicationState" , "End" ,
		"ERROR" , "La classe Page" , "Error" ,
		"ERRORPAGE" , "La classe Page" , "ErrorPage" ,
		"EXPIRES" , "La classe HttpResponse" , "Expires" ,
		"EXPIRESABSOLUTE" , "La classe HttpResponse" , "ExpiresAbsolute" ,
		"FILEPATH" , "La classe HttpRequest" , "FilePath" ,
		"FILES" , "La classe HttpRequest" , "Files" ,
		"FINDCONTROL" , "La classe Page" , "FindControl" ,
		"FLUSH" , "La classe HttpResponse" , "Flush" ,
		"FORM" , "La classe HttpRequest" , "Form" ,
		"GET" , "La classe HttpApplicationState" , "Get" ,
		"GETKEY" , "La classe HttpApplicationState" , "GetKey" ,
		"HASCONTROLS" , "La classe Page" , "HasControls" ,
		"HEADERS" , "La classe HttpRequest" , "Headers" ,
		"HTTPMETHOD" , "La classe HttpRequest" , "HttpMethod" ,
		"INIT" , "La classe Page" , "Init" ,
		"INPUTSTREAM" , "La classe HttpRequest" , "InputStream" ,
		"ISAUTHENTICATED" , "La classe HttpRequest" , "IsAuthenticated" ,
		"ISCLIENTCONNECTED" , "La classe HttpResponse" , "IsClientConnected" ,
		"ISPOSTBACK" , "La classe Page" , "IsPostBack" ,
		"ISSECURECONNECTION" , "La classe HttpRequest" , "IsSecureConnection" ,
		"ISVALID" , "La classe Page" , "IsValid" ,
		"ITEM" , "La classe HttpApplicationState" , "Item" ,
		"KEYS" , "La classe HttpApplicationState" , "Keys" ,
		"LOAD" , "La classe Page" , "Load" ,
		"LOADCONTROL" , "La classe Page" , "LoadControl" ,
		"LOCK" , "La classe HttpApplicationState" , "Lock" ,
		"PAGE.MAPPATH" , "La classe Page" , "MapPath" ,
		"REQUEST.MAPPATH" , "La classe HttpRequest" , "MapPath" ,
		"OUTPUT" , "La classe HttpResponse" , "Output" ,
		"OUTPUTSTREAM" , "La classe HttpResponse" , "OutputStream" ,
		"PARAMS" , "La classe HttpRequest" , "Params" ,
		"PATH" , "La classe HttpRequest" , "Path" ,
		"PATHINFO" , "La classe HttpRequest" , "PathInfo" ,
		"PHYSICALAPPLICATIONPATH" , "La classe HttpRequest" , "PhysicalApplicationPath" ,
		"PHYSICALPATH" , "La classe HttpRequest" , "PhysicalPath" ,
		"PICS" , "La classe HttpResponse" , "Pics" ,
		"QUERYSTRING" , "La classe HttpRequest" , "QueryString" ,
		"RAWURL" , "La classe HttpRequest" , "RawUrl" ,
		"REDIRECT" , "La classe HttpResponse" , "Redirect" ,
		"REMOVE" , "La classe HttpApplicationState" , "Remove" ,
		"REMOVEALL" , "La classe HttpApplicationState" , "RemoveAll" ,
		"REMOVEAT" , "La classe HttpApplicationState" , "RemoveAt" ,
		"REQUEST" , "La classe Page" , "Request" ,
		"REQUESTTYPE" , "La classe HttpRequest" , "RequestType" ,
		"RESOLVEURL" , "La classe Page" , "ResolveUrl" ,
		"RESPONSE" , "La classe Page" , "Response" ,
		"SAVEAS" , "La classe HttpRequest" , "SaveAs" ,
		"SERVER" , "La classe Page" , "Server" ,
		"SERVERVARIABLES" , "La classe HttpRequest" , "ServerVariables" ,
		"SESSION" , "La classe Page" , "Session" ,
		"SET" , "La classe HttpApplicationState" , "Set" ,
		"SMARTNAVIGATION" , "La classe Page" , "SmartNavigation" ,
		"START" , "La classe HttpApplicationState" , "Start" ,
		"STATICOBJECTS" , "La classe HttpApplicationState" , "StaticObjects" ,
		"STATUS" , "La classe HttpResponse" , "Status" ,
		"STATUSCODE" , "La classe HttpResponse" , "StatusCode" ,
		"STATUSDESCRIPTION" , "La classe HttpResponse" , "StatusDescription" ,
		"SUPPRESSCONTENT" , "La classe HttpResponse" , "SuppressContent" ,
		"TOTALBYTES" , "La classe HttpRequest" , "TotalBytes" ,
		"TRACE" , "La classe Page" , "Trace" ,
		"UNLOAD" , "La classe Page" , "Unload" ,
		"UNLOCK" , "La classe HttpApplicationState" , "Unlock" ,
		"URL" , "La classe HttpRequest" , "URL" ,
		"URLREFERRER" , "La classe HttpRequest" , "UrlReferrer" ,
		"USER" , "La classe Page" , "User" ,
		"USERAGENT" , "La classe HttpRequest" , "UserAgent" ,
		"USERHOSTADDRESS" , "La classe HttpRequest" , "UserHostAddress" ,
		"USERHOSTNAME" , "La classe HttpRequest" , "UserHostName" ,
		"USERLANGUAGES" , "La classe HttpRequest" , "UserLanguages" ,
		"VALIDATE" , "La classe Page" , "Validate" ,
		"VALIDATORS" , "La classe Page" , "Validators" ,
		"VIEWSTATE" , "La classe Page" , "ViewState" ,
		"WRITE" , "La classe HttpResponse" , "Write" ,
		"WRITEFILE" , "La classe HttpResponse" , "WriteFile" );


function referenceLookup()
{

  var aspVal;
  var dom = dw.getDocumentDOM();

  if (dom){
  //To synchronize the design and code view
  dom.synchronizeDocument();

  // The idea here is that we don't want to bother doing ASP.NET keyword processing if
  // the file is not an ASP.NET file.
  if(dom.documentType.indexOf('XML') != -1)
  {
    KEYWORDS = KEYWORDS_CONFIG;
  }
  else if(dom.documentType.indexOf('ASP.NET') != -1)
  {
    KEYWORDS = KEYWORDS_ASPNET;
  }

  if ((dom.documentType.indexOf('ASP.NET') == -1)&&(dom.documentType.indexOf('XML') == -1))
  {
    aspVal = new Array("");
  }
  else
  {
    var docEl = dom.documentElement;
    var wholeDoc = docEl.outerHTML;
    var theSel = dom.source.getSelection();
    var startPoint = searchBackwards(theSel[0],dom);
    var endPoint = searchForwards(theSel[1],dom,wholeDoc.length);
    var keyword;
    var j,k;
    j = dom.source.getText(startPoint,startPoint+1);
    k = dom.source.getText(endPoint-1,endPoint);

	//For subcategories in Web.Config Reference which are included in <>
    if (j == "<" )
	{
	  startPoint = startPoint+1;
	  endPoint = endPoint-1;
	}
	else if (k == ">" )
	{
	  endPoint = endPoint-1;
	}

	keyword = dom.source.getText(startPoint,endPoint);
	keyword = keyword.toUpperCase();

    // Special cases (multiple entries for single keyword)
	if (keyword == "CACHE")
	{
	  if (getPrevWord(startPoint,dom).toUpperCase() == "PAGE")
	  {
	    keyword = "PAGE.CACHE";
	  }
	  else if (getPrevWord(startPoint,dom).toUpperCase() == "RESPONSE")
	  {
	     keyword = "RESPONSE.CACHE";
	  }
	}
	else if (keyword == "CLEAR")
	{
	  if (getPrevWord(startPoint,dom).toUpperCase() == "RESPONSE")
	  {
	    keyword = "RESPONSE.CLEAR";
	  }
	  else if (getPrevWord(startPoint,dom).toUpperCase() == "APPLICATION")
	  {
	     keyword = "APPLICATION.CLEAR";
	  }
	}
	else if (keyword == "CONTENTENCODING")
	{
	  if (getPrevWord(startPoint,dom).toUpperCase() == "REQUEST")
	  {
	    keyword = "REQUEST.CONTENTENCODING";
	  }
	  else if (getPrevWord(startPoint,dom).toUpperCase() == "RESPONSE")
	  {
	    keyword = "RESPONSE.CONTENTENCODING";
	  }
	}
	else if (keyword == "CONTENTTYPE")
	{
	  if (getPrevWord(startPoint,dom).toUpperCase() == "REQUEST")
	  {
	    keyword = "REQUEST.CONTENTTYPE";
	  }
	  else if (getPrevWord(startPoint,dom).toUpperCase() == "RESPONSE")
	  {
	    keyword = "RESPONSE.CONTENTTYPE";
	  }
   	}
   	else if (keyword == "COOKIES")
   	{
	  if (getPrevWord(startPoint,dom).toUpperCase() == "REQUEST" )
	  {
	    keyword = "REQUEST.COOKIES";
	  }
	  else if (getPrevWord(startPoint,dom).toUpperCase() == "RESPONSE" )
	  {
	    keyword = "RESPONSE.COOKIES";
	  }
   	}
   	else if (keyword == "END")
   	{
	  if (getPrevWord(startPoint,dom).toUpperCase() == "APPLICATION")
	  {
	    keyword = "APPLICATION.END";
	  }
	  else if (getPrevWord(startPoint,dom).toUpperCase() == "RESPONSE")
	  {
	    keyword = "RESPONSE.END";
	  }
   	}
   	else if (keyword == "MAPPATH")
   	{
	  if (getPrevWord(startPoint,dom).toUpperCase() == "REQUEST")
	  {
	    keyword = "REQUEST.MAPPATH";
	  }
	  else if (getPrevWord(startPoint,dom).toUpperCase() == "PAGE")
	  {
	    keyword = "PAGE.MAPPATH";
	  }
    }
    else if(keyword == "SYSTEM" || keyword == "WEB")
    {
	  keyword = "SYSTEM.WEB"
    }

    aspVal = getTopic(keyword);
    }
  }
    if (!aspVal)
	{
	  aspVal = new Array("");
	}
    return aspVal;
}

</script>
</head>
<body bgcolor="#FFFFFF" text="#000000">
</body>
</html>
